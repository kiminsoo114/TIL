REST, REST_API, RESTFUL에 대한 이해


1. REST란?
REpresentational State Transfer의 약자

1) 웹에 존재하는 모든 자원(문서, 이미지, 동영상 등)에 고유한 URL를 부여해 활용하는 것으로
자워능ㄹ 정의하고 자원에 대한 주소를 지정하는 방법론

2) HTTP 메소드(POST, GET, PUT, DELETE)를 통해 CRUD(Create, Read, Update, Delete)연산을 수행한다.

3) 서버와 클라이언트가 데이터를 주고받는 형식은 JSON, XML, TEXT, RSS 등이 있으며 KEY와 VALUE를 활용하는 JSON을 주로 활용한다.

4) 자원(Resource) : URL / 행위(Verb) : HTTP METHOD / 표현(Representation of Resource) 세 가지 구성요소를 갖는다.

5) 네트워크 상에서 클라이언트와 서버 사이의 통신 방식 중 하나로 자원을 요구하는 쪽(브라우저)이 클라이언트이고 자원을 가지고 있는 쪽이 서버이다.

6) 다양한 클라이언트(모바일 디바이스 등)의 등장으로 멀티 플랫폼을 지원하는 서비스 자원에 대한 아키텍처의 대한으로 REST가 관심을 받는다.

7) Node.js에서는 Express 모듈을 이용해 Restful API를 구성한다. Express모듈은 웹 프레임워크로 HTTP를 기반으로 통신하기 때문에 웹 서버 구축과 API서버 구축 모두 사용된다.

8) Stateless(무상태) : HTTP프로토콜은 Stateless Protocol 이므로 REST 역시 무상태성

9) Cacheable(캐시 처리 기능가능)

10. Layered System(계층 구조)

11) Uniform Interface(인터페이스 일관성)

12) Self-Descriptiveness(자체 표현)

URI : Uniform Resource Locator로 인터넷 상 자원의 위치
URL : Uniform Resource Identifier로 인터넷 상의 자원을 식별하기 위핸 문자열의 구성
URI는 URL을 포함한다.


2. HTTP 메소드

1) GET : Read : 정보 요청, URI가 가진 정보를 검색하기 위해 서버에 요청한다.
2) POST : Create : 정보 입력, 클라이언트에서 서버로 전달하려는 정보를 보낸다.
3) PUT : Update : 정보 업데이트, 주로 갱신하기 위해 사용한다.
4) DELETE : Delete : 정보삭제 (안정성 문제로 대부분 서버에서 비활성)


3. REST_API란?
API는 Application Programming Interface의 약자로 응용 프로그램에서 사용할 수 있도록 운영체제나 프로그래밍 언어가 제공하는 기능을
제어할 수 있게 만든 인터페이스이다.
REST특징을 기반으로 서비스 API를 구현하는데 쉽게 생각해서 서버에 DB등에서 클라이언트로 REST특징을 살려서 데이터를 특정형태에 맞게 요청을 하고 받아오는 작업이다

4. RESTful_API란?
REST의 설계 규칙을 잘 지켜서 설계된 API를 RESTful한 API라한다.
설계 규칙
1) URI는 리소스를 표현해야 하며 명사를 사용
2) 슬래시로 계층 관계를 표현할 것, 소문자로 구성할 것
3) 자원에 대한 행위는  HTTP Method로 표현해야하며 HTTP 응답 코드로 클라이언트에게 피드백을 해줘야한다.
